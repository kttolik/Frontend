"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mappings = void 0;
class MorseSymbol {
    constructor(symbol, translation) {
        this.symbol = symbol;
        this.translation = translation;
    }
}
exports.mappings = [
    new MorseSymbol('.-', 'A'),
    new MorseSymbol('-...', 'B'),
    new MorseSymbol('-.-.', 'C'),
    new MorseSymbol('-..', 'D'),
    new MorseSymbol('.', 'E'),
    new MorseSymbol('..-.', 'F'),
    new MorseSymbol('--.', 'G'),
    new MorseSymbol('....', 'H'),
    new MorseSymbol('..', 'I'),
    new MorseSymbol('.---', 'J'),
    new MorseSymbol('-.-', 'K'),
    new MorseSymbol('.-..', 'L'),
    new MorseSymbol('--', 'M'),
    new MorseSymbol('-.', 'N'),
    new MorseSymbol('---', 'O'),
    new MorseSymbol('.--.', 'P'),
    new MorseSymbol('--.-', 'Q'),
    new MorseSymbol('.-.', 'R'),
    new MorseSymbol('...', 'S'),
    new MorseSymbol('-', 'T'),
    new MorseSymbol('..-', 'U'),
    new MorseSymbol('...-', 'V'),
    new MorseSymbol('.--', 'W'),
    new MorseSymbol('-..-', 'X'),
    new MorseSymbol('-.--', 'Y'),
    new MorseSymbol('--..', 'Z'),
    new MorseSymbol('-----', '0'),
    new MorseSymbol('.----', '1'),
    new MorseSymbol('..---', '2'),
    new MorseSymbol('...--', '3'),
    new MorseSymbol('....-', '4'),
    new MorseSymbol('.....', '5'),
    new MorseSymbol('-....', '6'),
    new MorseSymbol('--...', '7'),
    new MorseSymbol('---..', '8'),
    new MorseSymbol('----.', '9')
];

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vcnNlVGFibC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLFdBQVc7SUFHYixZQUFZLE1BQWMsRUFBRSxXQUFtQjtRQUMzQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7QUFDWSxRQUFBLFFBQVEsR0FBdUI7SUFDeEMsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUMxQixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0lBQzVCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDNUIsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztJQUMzQixJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3pCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDNUIsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztJQUMzQixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0lBQzVCLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7SUFDMUIsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUM1QixJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzNCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDNUIsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUMxQixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO0lBQzFCLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7SUFDM0IsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUM1QixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0lBQzVCLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7SUFDM0IsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztJQUMzQixJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3pCLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7SUFDM0IsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUM1QixJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0lBQzNCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDNUIsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUM1QixJQUFJLFdBQVcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0lBQzVCLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDN0IsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztJQUM3QixJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQzdCLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDN0IsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztJQUM3QixJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQzdCLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDN0IsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztJQUM3QixJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQzdCLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7Q0FDaEMsQ0FBQyIsImZpbGUiOiJtb3JzZVRhYmwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBNb3JzZVN5bWJvbCB7XHJcbiAgICBzeW1ib2w6IHN0cmluZztcclxuICAgIHRyYW5zbGF0aW9uOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihzeW1ib2w6IHN0cmluZywgdHJhbnNsYXRpb246IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xyXG4gICAgICAgIHRoaXMudHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbjtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgbWFwcGluZ3M6IEFycmF5PE1vcnNlU3ltYm9sPiA9IFtcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi0nLCAnQScpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCctLi4uJywgJ0InKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLS4tLicsICdDJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0uLicsICdEJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy4nLCAnRScpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCcuLi0uJywgJ0YnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLS0uJywgJ0cnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi4uLicsICdIJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy4uJywgJ0knKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi0tLScsICdKJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0uLScsICdLJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy4tLi4nLCAnTCcpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCctLScsICdNJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0uJywgJ04nKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLS0tJywgJ08nKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi0tLicsICdQJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0tLi0nLCAnUScpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCcuLS4nLCAnUicpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCcuLi4nLCAnUycpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCctJywgJ1QnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi4tJywgJ1UnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi4uLScsICdWJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy4tLScsICdXJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0uLi0nLCAnWCcpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCctLi0tJywgJ1knKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLS0uLicsICdaJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0tLS0tJywgJzAnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi0tLS0nLCAnMScpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCcuLi0tLScsICcyJyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy4uLi0tJywgJzMnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLi4uLi0nLCAnNCcpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCcuLi4uLicsICc1JyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0uLi4uJywgJzYnKSxcclxuICAgIG5ldyBNb3JzZVN5bWJvbCgnLS0uLi4nLCAnNycpLFxyXG4gICAgbmV3IE1vcnNlU3ltYm9sKCctLS0uLicsICc4JyksXHJcbiAgICBuZXcgTW9yc2VTeW1ib2woJy0tLS0uJywgJzknKVxyXG5dO1xyXG4iXSwic291cmNlUm9vdCI6Ii4uIn0=
